"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import pprint
import sys
import tomllib
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-h)or_z$ep4*nk%7*%iq=xm+u8(fpe8a(wmnfaf3&=$p8$fs=n7"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ["*"]

# set default config
config = {}
if os.path.isfile(BASE_DIR / "configs/config.toml"):
    with open(BASE_DIR / "configs/config.toml", "rb") as f:
        config = tomllib.load(f)

if config.get("base", {}).get("DEBUG") is not None:
    DEBUG = config["base"]["DEBUG"]

module = sys.modules[__name__]
base_config = config.get("base", {})
for key, value in base_config.items():
    setattr(module, key.upper(), value)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_bootstrap5",
    "channels",
    "fronts",
    "rest_framework",
    "modeling",
    "accounts",
    # jwt
    "rest_framework_simplejwt",
    "djoser",
    "rest_framework_simplejwt.token_blacklist",
    "simple_history",
    "django_filters",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI_APPLICATION = 'server.wsgi.application'
ASGI_APPLICATION = "server.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}
IS_TESTING = "test" in sys.argv


def set_database(configure):
    for key, value in configure.items():
        DATABASES["default"][key.upper()] = value


if IS_TESTING:
    database_config = config.get("database", {}).get("test", {})
    set_database(database_config)
else:
    DJANGO_ENV = os.getenv("DJANGO_ENV", "development").lower()
    if DJANGO_ENV == "production":
        database_config = config.get("database", {}).get("production", {})
        set_database(database_config)
    else:
        database_config = config.get("database", {}).get("development", {})
        set_database(database_config)

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"
USE_I18N = True
TIME_ZONE = "Asia/Seoul"
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "statics"
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# AUTH
AUTH_USER_MODEL = "accounts.User"

# JWT 관련
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

DJOSER = {
    "LOGIN_FIELD": "email",
    "USER_CREATE_PASSWORD_RETYPE": True,
    "SERIALIZERS": {
        # or your custom serializer
        "user_create": "accounts.serializers.UserCreateSerializer",
        "user": "accounts.serializers.UserSmartSerializer",
        "current_user": "accounts.serializers.UserSmartSerializer",
    },
    "SEND_ACTIVATION_EMAIL": False,
    "SEND_CONFIRMATION_EMAIL": False,
    "SEND_PASSWORD_RESET_EMAIL": False,
    "SEND_USERNAME_CHANGED_EMAIL": False,
    "SEND_PASSWORD_CHANGED_EMAIL": False,
}

CORS_ALLOW_ALL_ORIGINS = True

LOGGING = {}


if config.get("logging"):
    LOGGING.update(config.get("logging"))

JENKINS = {"URL": "", "TOKEN": ""}

if config.get("jenkins"):
    JENKINS = config.get("jenkins")

# Jenkins test mode - treats all Jenkins requests as successful
# Set to True when Jenkins is not available (development/testing)
JENKINS_TEST_MODE = config.get("jenkins", {}).get("test_mode", False)

# Channels Configuration
# CHANNEL_LAYERS = {"default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}}

# For production with multiple workers, use Redis channel layer
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("192.128.1.100", 6379)],
        },
    },
}
