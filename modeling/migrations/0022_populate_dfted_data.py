# Generated by Django 5.0.6 on 2025-08-12 08:49

from django.db import migrations


def populate_dfted_data(apps, schema_editor):
    """
    1. Set existing HPDF targets to also have is_DFTed=True
    2. Create CriterionTarget relationships for DFTed targets
    """
    Target = apps.get_model('modeling', 'Target')
    Criterion = apps.get_model('modeling', 'Criterion')
    CriterionTarget = apps.get_model('modeling', 'CriterionTarget')
    
    # Step 1: Update existing HPDF targets to also be DFTed
    hpdf_targets = Target.objects.filter(is_HPDF=True, is_DFTed=False)
    updated_count = hpdf_targets.update(is_DFTed=True)
    print(f"Updated {updated_count} HPDF targets to also be DFTed")
    
    # Step 2: Create CriterionTarget relationships for DFTed targets
    # Get all DFTed targets
    dfted_targets = Target.objects.filter(is_DFTed=True)
    
    # Get all criteria available for DFTed
    dfted_criteria = Criterion.objects.filter(available_DFTed=True)
    
    created_relationships = 0
    for target in dfted_targets:
        for criterion in dfted_criteria:
            # Check if relationship already exists
            if not CriterionTarget.objects.filter(
                target=target, criterion=criterion
            ).exists():
                CriterionTarget.objects.create(
                    target=target,
                    criterion=criterion
                )
                created_relationships += 1
    
    print(f"Created {created_relationships} new CriterionTarget relationships for DFTed targets")


def reverse_dfted_data(apps, schema_editor):
    """
    Reverse the data migration - remove DFTed flags and relationships
    """
    Target = apps.get_model('modeling', 'Target')
    CriterionTarget = apps.get_model('modeling', 'CriterionTarget')
    
    # Remove DFTed flag from targets that are also HPDF (likely the ones we added)
    Target.objects.filter(is_HPDF=True, is_DFTed=True).update(is_DFTed=False)
    
    # Remove CriterionTarget relationships for DFTed-only targets
    # (This is conservative - only removes relationships where target is DFTed but not HPDF or IP)
    dfted_only_targets = Target.objects.filter(is_DFTed=True, is_HPDF=False, is_IP=False)
    CriterionTarget.objects.filter(target__in=dfted_only_targets).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('modeling', '0021_add_dfted_target_type'),
    ]

    operations = [
        migrations.RunPython(
            populate_dfted_data,
            reverse_dfted_data,
        ),
    ]
